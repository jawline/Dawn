#include "rtc.h"
#include "interrupt_handler.h"
#include "idt.h"
#include "common.h"

static cmos_time_struct system_time;
static uint32 tbuffer;

static void rtc_callback(idt_call_registers_t regs)
{
	if (tbuffer > 1024) {
		system_time.seconds += 1;

		if (system_time.seconds > 59) {
			system_time.minutes += 1;
			system_time.seconds = 0;
			if (system_time.minutes > 59) {
				system_time.hours += 1;
				system_time.minutes = 0;
				if (system_time.hours > 23) {
					//Screw it just reload from CMOS
					fill_cmos_tstruct(&system_time);			
				}		
			}	
		}
	} else {
		tbuffer ++;	
	}

	outb(0x70, 0x0C); //select register C
	inb(0x71); //just throw away contents.
}

void Initialize_RTC() {
	register_interrupt_handler(GET_IRQ(8), rtc_callback);
	
	disable_interrupts();

	outb(0x70, 0x0B); //set the index to register B
	uint8 prev=inb(0x71); //read the current value of register B
	outb(0x70, 0x0B); //set the index again(a read will reset the index to register D)
	outb(0x71, prev | 0x40); //write the previous value or'd with 0x40. This turns on bit 6 of register D

	enable_interrupts();

	fill_cmos_tstruct(&system_time);
	
}

cmos_time_struct Get_System_Time() {
	return system_time;
}
